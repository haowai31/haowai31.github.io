<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RSS - Thinking and Recording</title>
    <description>Thinking and Recording - </description>
    <link>http://haowai31.github.io/</link>
    <atom:link href="http://haowai31.github.io//page/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 14 May 2015 21:39:57 +0800</pubDate>
    <lastBuildDate>Thu, 14 May 2015 21:39:57 +0800</lastBuildDate>
    <generator>haowai31</generator>
    
      <item>
        <title>NG机器学习的编程实验</title>
        <description>&lt;p&gt;&lt;a href=&quot;#ex1&quot;&gt;实验一：线性回归&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今天把NG的机器学习公开课的作业又顺了一边，很多语句不用就忘了，另外矩阵运算用起来就是让人&lt;em&gt;心旷神怡&lt;/em&gt;。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;a name=&quot;ex1&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;programming-assignment-linear-regression&quot;&gt;实验一，Programming Assignment: Linear Regression&lt;/h2&gt;

&lt;p&gt;这个实验就是用来熟悉一下提交的环境，另外在学习算法的各个过程都需要填几行关键程序，包括怎么求估价函数，怎么施行阶梯算法，怎么标准化数据等等，选做实验是两种特征的训练数据。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1.1 单位矩阵&lt;/h3&gt;
&lt;p&gt;就是通过eye函数得一个单位矩阵。&lt;/p&gt;

&lt;h3 id=&quot;j&quot;&gt;1.2 计算估价函数J&lt;/h3&gt;
&lt;p&gt;（对不起我还不会写公式，回来更新）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;J = sum((X * theta - y).^2) / (2*m);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意其中的.^，这是矩阵特有的操作符号，是矩阵的每一个对应的位置进行相应的运算。sum函数则是对矩阵求和。如果得出的结果是32.07就说明程序写的没问题，总之矩阵运算一定要注意的是x*y对应起来，否则如果出错还容易发现矩阵运算没有写错，如果恰好没有提示错误，得出的结果不对这种Bug会改的头破血流。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.3 实现阶梯下降算法&lt;/h3&gt;
&lt;p&gt;（公式仍然不会写）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theta(1) = theta(1) - alpha/m*sum(X*theta_backup-y);
theta(2) = theta(2) - alpha/m*sum((X*theta_backup-y).*X(:,2));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这只是单纯照着阶梯下降算法更新theta就好。值得注意的地方在上课的时候NG也说了，因为再更新theta的过程中会改变theta，所以我这里用了一个 ** theta_backup ** 对原来的theta进行了备份。这是一个特征的情况，下面还会有多种特征的简便写法（我第一次写的是循环^o^）。&lt;/p&gt;

&lt;p&gt;这个实验做到这里其实已差不多了，看到最后画出的图还是很开心的，虽然感觉上跟我并没有什么关系。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.4 多类特征的附加实验&lt;/h3&gt;
&lt;p&gt;具体步骤跟单类特征差不多，值得注意的就是上文提到的更新theta的简便写法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theta = theta - alpha / m * X' * (X * theta - y); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;X’是求X的转置矩阵。&lt;/p&gt;

&lt;p&gt;这是对数据标准化的语句，话说在pdf中间直接告诉要怎么做这样真的好嘛？连需要用的函数都给了。。。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mu = mean(X);
sigma = std(X);
X_norm = (X - repmat(mu, size(X,1) , 1))  ./ repmat(sigma,size(X,1),1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mean()函数是求平均值，具体自己做做实验就知道了，我就是一边儿一边儿在shell上面测试函数的用法，实用是学习最快的方法。std()函数是求标准差，然后完全按照pdf的描述就可以写下这条语句了（当然，我这么笨的人在shell上面测试了好久。。）。&lt;/p&gt;

&lt;p&gt;另外视频中也提到过，如果数据规模小的话，可以直接使用矩阵进行计算：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theta = pinv(X'*X)*X'*y;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pinv()函数是求矩阵的逆，其实就是这个函数限制着这种干脆利索的方法的运行速度的。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;1.5 总结&lt;/h3&gt;
&lt;p&gt;总之，第一次实验叫做 &lt;strong&gt;worm exercises&lt;/strong&gt; 也是有一定道理的。其实就是给 &lt;strong&gt;纸上得来&lt;/strong&gt; 和 &lt;strong&gt;恭行&lt;/strong&gt; 两件事建立个联系，知道这些算法是可以实现并且实际工作的，这对于我这样的笨蛋还是很重要的，学的时候总觉得隔层纱，到真的程序运行结果砸在脸上了，就能迷糊回来了。&lt;/p&gt;

&lt;p&gt;（2015.05.14 21：28）&lt;/p&gt;
</description>
        <pubDate>Thu, 14 May 2015 00:00:00 +0800</pubDate>
        <link>http://haowai31.github.io//blog/2015/05/14/ng_ex.html</link>
        <guid isPermaLink="true">http://haowai31.github.io//blog/2015/05/14/ng_ex.html</guid>
        
        <category>机器学习</category>
        
      </item>
    
      <item>
        <title>你好，旅行者～</title>
        <description>&lt;p&gt;原本打算把之前进行的论文阅读报告记录一下，然而由于&lt;strong&gt;不可抗力&lt;/strong&gt;的原因，最终在github上搭了个博客来完成原来的目标。总之，尽量保持更新。&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2015 00:00:00 +0800</pubDate>
        <link>http://haowai31.github.io//blog/2015/05/12/hello.html</link>
        <guid isPermaLink="true">http://haowai31.github.io//blog/2015/05/12/hello.html</guid>
        
        <category>开始</category>
        
      </item>
    
  </channel>
</rss>
